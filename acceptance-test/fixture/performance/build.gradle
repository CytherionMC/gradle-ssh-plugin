task('should execute many commands') << {
    ssh.run {
        (1..100).each {
            session(remotes.testServer) {
                execute 'uptime', logging: 'none'
            }
        }
    }
}

task('should execute many commands with much output') << {
    ssh.run {
        (1..100).each {
            session(remotes.testServer) {
                execute 'sysctl -a', logging: 'none'
            }
        }
    }
}

['sftp', 'scp'].each { method ->
    task("should put many files via $method") << {
        assert localWorkDir.mkdirs()
        (1..1000).each { index ->
            file("$localWorkDir/$index") << randomInt()
        }
        ssh.run {
            settings {
                fileTransfer = method
            }
            session(remotes.testServer) {
                execute "mkdir -vp $remoteWorkDir"
                put from: localWorkDir, into: remoteWorkDir
            }
        }
    }

    task("should get many files via $method") << {
        assert localWorkDir.mkdirs()
        ssh.run {
            settings {
                fileTransfer = method
            }
            session(remotes.testServer) {
                execute "mkdir -vp $remoteWorkDir"
                execute "for ((i = 0; i < 1000; i++)); do echo \$i > $remoteWorkDir/\$i; done"
                get from: remoteWorkDir, into: localWorkDir
            }
        }
    }

    task("should put a large file via $method") << {
        assert localWorkDir.mkdirs()
        def largeFile = file("$localWorkDir/file")
        def random = new Random()
        def buffer = new byte[1024 * 1024]
        (1..100).each {
            random.nextBytes(buffer)
            largeFile << buffer
        }
        ssh.run {
            settings {
                fileTransfer = method
            }
            session(remotes.testServer) {
                execute "mkdir -vp $remoteWorkDir"
                put from: largeFile, into: remoteWorkDir
            }
        }
    }

    task("should get a large file via $method") << {
        assert localWorkDir.mkdirs()
        ssh.run {
            settings {
                fileTransfer = method
            }
            session(remotes.testServer) {
                execute "mkdir -vp $remoteWorkDir"
                execute "dd if=/dev/zero of=$remoteWorkDir/file bs=1048576 count=100"
                get from: "$remoteWorkDir/file", into: localWorkDir
            }
        }
    }
}

def specs = tasks.matching { it.name.startsWith('should ') }
specs.each { task ->
    task.doFirst { ext.startedTime = System.currentTimeMillis() }
    task.doLast { ext.elapsedTime = System.currentTimeMillis() - startedTime }
}

task('showElapsedTime', dependsOn: specs) << {
    specs.each { spec ->
        println "$spec\t$spec.elapsedTime"
    }
}

test.dependsOn('showElapsedTime')
