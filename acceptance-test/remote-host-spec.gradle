remotes {
    yetAnotherLocalhost {
        role 'testServers'
        host = 'localhost'
        user = System.properties['user.name']
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
}


feature('execute on multiple remotes by list with braces') {
    task 'executeOnRemotesBraces'
    category 'test'
}

task executeOnRemotesBraces << {
    def x = randomInt()
    def y = randomInt()
    def a = ssh.run {
        session([remotes.localhost, remotes.yetAnotherLocalhost]) {
            execute "expr $x + $y"
        }
    }
    assert a as int == (x + y)
}


feature('execute on multiple remotes by list without braces') {
    task 'executeOnRemotes'
    category 'test'
}

task executeOnRemotes << {
    def x = randomInt()
    def y = randomInt()
    def a = ssh.run {
        session(remotes.localhost, remotes.yetAnotherLocalhost) {
            execute "expr $x + $y"
        }
    }
    assert a as int == (x + y)
}


feature('filter hosts by role') {
    task 'executeCommandByRole'
    category 'test'
}

task executeCommandByRole << {
    def x = randomInt()
    def y = randomInt()
    def a = ssh.run {
        session(remotes.role('testServers')) {
            execute "expr $x + $y"
        }
    }
    assert a as int == (x + y)
}
