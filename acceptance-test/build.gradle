buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "org.hidetake:gradle-ssh-plugin:$version"

        // apply backports if Gradle version is 1.x
        if (GradleVersion.current().version.startsWith('1.')) {
            classpath 'org.codehaus.groovy:groovy-backports-compat23:2.3.6'
        }
    }
}

apply plugin: 'org.hidetake.ssh'

remotes {
    localhost {
        role 'testServers'
        host = 'localhost'
        user = System.getProperty('user.name')
        identity = file("${System.getProperty('user.home')}/.ssh/id_rsa")
    }
}


// apply scripts in this directory
task sideEffect { description = '(internal task)' }
task sshAgent   { description = '(internal task)' }

project.ext.randomInt = { int max = 10000 -> (Math.random() * max) as int }

fileTree(projectDir) {
    include '*.gradle'
    exclude 'build.gradle'
}.each {
    apply from: it
}


// add tasks to manage the working directory
task setupLocalWorkDir << {
    delete buildDir
    buildDir.mkdirs()
}

task cleanupLocalWorkDir << {
    delete buildDir
}

final remoteWorkDirBase = "/tmp/${project.name}.${UUID.randomUUID()}"

task setupRemoteWorkDir << {
    ssh.run {
        session(remotes.localhost) {
            execute "mkdir -v $remoteWorkDirBase"
        }
    }
}

task cleanupRemoteWorkDir << {
    ssh.run {
        session(remotes.localhost) {
            execute "rm -vfr $remoteWorkDirBase"
        }
    }
}


// categorize specs
task test               { description = 'test specs' }
task testWithSideEffect { description = 'test specs which cause side effect' }
task testWithSshAgent   { description = 'test specs which require SSH agent' }

afterEvaluate {
    final specs = tasks.matching { it.name.matches ~/^should .+/ }
    final specsWithSideEffect = specs.findAll { it.dependsOn.contains tasks.sideEffect }
    final specsWithSshAgent = specs.findAll { it.dependsOn.contains tasks.sshAgent }

    tasks.testWithSideEffect.dependsOn(specsWithSideEffect)
    tasks.testWithSshAgent.dependsOn(specsWithSshAgent)
    tasks.test.dependsOn(specs - specsWithSideEffect - specsWithSshAgent)

    specs*.dependsOn(tasks.setupLocalWorkDir, tasks.setupRemoteWorkDir)
    specs*.finalizedBy(tasks.cleanupLocalWorkDir, tasks.cleanupRemoteWorkDir)
    specs.each {
        it.ext.localWorkDir  = file("$buildDir/${it.hashCode()}")
        it.ext.remoteWorkDir = "${remoteWorkDirBase}/${it.hashCode()}"
    }
}
