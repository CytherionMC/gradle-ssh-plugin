buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "org.hidetake:gradle-ssh-plugin:$version"
    }
}

apply plugin: 'org.hidetake.ssh'

remotes {
    localhost {
        role 'testServers'
        host = 'localhost'
        user = System.getProperty('user.name')
        identity = file("${System.getProperty('user.home')}/.ssh/id_rsa")
    }
}


// apply scripts in this directory
task sideEffect { description = '(internal task)' }
task sshAgent   { description = '(internal task)' }

project.ext.randomInt = { int max = 10000 -> (Math.random() * max) as int }

fileTree(projectDir) {
    include '*.gradle'
    exclude 'build.gradle'
}.each {
    apply from: it
}


// add tasks to manage the working directory
task setupLocalWorkDir << {
    delete buildDir
    buildDir.mkdirs()
}

task cleanupLocalWorkDir << {
    delete buildDir
}

final remoteWorkDirBase = "/tmp/${project.name}.${UUID.randomUUID()}"

task setupRemoteWorkDir << {
    ssh.run {
        session(remotes.localhost) {
            execute "mkdir -v $remoteWorkDirBase"
        }
    }
}

task cleanupRemoteWorkDir << {
    ssh.run {
        session(remotes.localhost) {
            execute "rm -vfr $remoteWorkDirBase"
        }
    }
}


// categorize features
task test               { description = 'run tests' }
task testWithSideEffect { description = 'run tests which cause side effect' }
task testWithSshAgent   { description = 'run tests which require SSH agent' }

afterEvaluate {
    final features = tasks.matching { it.name.matches ~/(feature|spec): .+/ }
    final featuresWithSideEffect = features.findAll { it.dependsOn.contains tasks.sideEffect }
    final featuresWithSshAgent = features.findAll { it.dependsOn.contains tasks.sshAgent }

    tasks.testWithSideEffect.dependsOn(featuresWithSideEffect)
    tasks.testWithSshAgent.dependsOn(featuresWithSshAgent)
    tasks.test.dependsOn(features - featuresWithSideEffect - featuresWithSshAgent)

    features*.dependsOn(tasks.setupLocalWorkDir, tasks.setupRemoteWorkDir)
    features*.finalizedBy(tasks.cleanupLocalWorkDir, tasks.cleanupRemoteWorkDir)
    features.each {
        it.ext.localWorkDir  = file("$buildDir/${it.hashCode()}")
        it.ext.remoteWorkDir = "${remoteWorkDirBase}/${it.hashCode()}"
    }
}
