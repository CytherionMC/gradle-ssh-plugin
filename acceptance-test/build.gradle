buildscript {
    // Set product version if tag is given on Travis CI
    version = System.getenv('TRAVIS_TAG') ?: 'SNAPSHOT'

    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "org.hidetake:gradle-ssh-plugin:$version"

        // apply backports on Gradle 1.x
        if (gradle.gradleVersion.startsWith('1.')) {
            classpath 'org.codehaus.groovy:groovy-backports-compat23:2.3.6'
        }
    }
}

apply plugin: 'org.hidetake.ssh'

remotes {
    localhost {
        role 'testServers'
        host = 'localhost'
        user = System.getProperty('user.name')
        identity = file("${System.getProperty('user.home')}/.ssh/id_rsa")
    }
}


afterEvaluate {
    ext.specs = tasks.matching { it.name.startsWith 'should ' }
    ext.specs.ext.findBy = { tag -> specs.findAll { it.dependsOn.contains tag } }
}

// add utility methods for specs
ext.randomInt = { int max = 10000 -> (Math.random() * max) as int }

// setup and cleanup a working directory on each spec
ext.remoteWorkDirBase = "/tmp/${project.name}.${UUID.randomUUID()}"

task setupLocalWorkDir << {
    delete buildDir
    buildDir.mkdirs()
}

task cleanupLocalWorkDir << {
    delete buildDir
}

task setupRemoteWorkDir << {
    ssh.run {
        session(remotes.localhost) {
            execute "mkdir -v $remoteWorkDirBase"
        }
    }
}

task cleanupRemoteWorkDir << {
    ssh.run {
        session(remotes.localhost) {
            execute "rm -vfr $remoteWorkDirBase"
        }
    }
}

afterEvaluate {
    specs.each { spec ->
        spec.dependsOn tasks.setupLocalWorkDir
        spec.dependsOn tasks.setupRemoteWorkDir
        spec.finalizedBy tasks.cleanupLocalWorkDir
        spec.finalizedBy tasks.cleanupRemoteWorkDir
        spec.ext.localWorkDir  = file("$buildDir/${spec.hashCode()}")
        spec.ext.remoteWorkDir = "$remoteWorkDirBase/${spec.hashCode()}"
    }
}

// categorize specs
final tags = [
    project.task('sideEffect', description: 'specs which may cause side effect'),
    project.task('sshAgent',   description: 'specs which require the SSH agent'),
]

task test {
    description = "Test all specs except ${tags*.name}"
}

afterEvaluate {
    tags.each { tag -> project.task "testWith${tag.name.capitalize()}",
        description: "Test $tag.description",
        dependsOn: specs.findBy(tag)
    }

    test.dependsOn specs - tags.collect { specs.findBy it }.flatten()
}

// apply specs in this directory
fileTree(projectDir) {
    include '*.gradle'
    exclude 'build.gradle'
}.each {
    apply from: it
}

