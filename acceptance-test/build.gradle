description 'Automated acceptance test with SSH server'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath "org.hidetake:gradle-ssh-plugin:$version"
    }
}

apply plugin: 'org.hidetake.ssh'

remotes {
    localhost {
        role 'testServers'
        host = 'localhost'
        user = System.properties['user.name']
        identity = file("${System.properties['user.home']}/.ssh/id_rsa")
    }
}


/*
 * Test helper tasks and methods.
 */

ext {
    randomInt = { int max = 10000 -> (Math.random() * max) as int }

    remoteTempPrefix = "/tmp/remote-fixture-${randomInt()}"
    remoteTempPath = { String name = randomInt().toString() -> "$remoteTempPrefix-$name" }

    localTempPrefix = "$buildDir/local-fixture-${randomInt()}"
    localTempPath = { String name = randomInt().toString() -> "$localTempPrefix-$name" }
}

task setupBuildDir(type: Delete) {
    delete buildDir
    doLast {
        buildDir.mkdir()
    }
}

task cleanLocalTemp << {
    delete buildDir
    buildDir.mkdir()
}

task cleanRemoteTemp << {
    assert remoteTempPrefix
    ssh.run {
        session(remotes.localhost) {
            execute("rm -vr ${remoteTempPrefix}*")
        }
    }
}

task sideEffect { description = '(internal task)' }
task sshAgent   { description = '(internal task)' }


fileTree(projectDir) {
    include '*.gradle'
    exclude 'build.gradle'
}.each {
    apply from: it
}


task test               { description = 'run tests' }
task testWithSideEffect { description = 'run tests which cause side effect' }
task testWithSshAgent   { description = 'run tests which require SSH agent' }

afterEvaluate {
    final features = tasks.matching { it.name.matches ~/(feature|spec): .+/ }
    final featuresWithSideEffect = features.findAll { it.dependsOn.contains tasks.sideEffect }
    final featuresWithSshAgent = features.findAll { it.dependsOn.contains tasks.sshAgent }

    tasks.testWithSideEffect.dependsOn(featuresWithSideEffect)
    tasks.testWithSshAgent.dependsOn(featuresWithSshAgent)
    tasks.test.dependsOn(features - featuresWithSideEffect - featuresWithSshAgent)
}
