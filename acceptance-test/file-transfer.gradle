
task('should put, compute and get files') << {
    def x = randomInt()
    def y = randomInt()

    localWorkDir.mkdir()
    file("$localWorkDir/LX") << x
    file("$localWorkDir/LY") << y

    // should put and get files exactly
    ssh.run {
        session(remotes.localhost) {
            execute "mkdir -vp $remoteWorkDir"
            put from: "$localWorkDir/LX", into: "$remoteWorkDir/RX"
            put from: "$localWorkDir/LY", into: "$remoteWorkDir/RY"
            execute "expr `cat $remoteWorkDir/RX` + `cat $remoteWorkDir/RY` > $remoteWorkDir/RA"
            execute "expr `cat $remoteWorkDir/RX` - `cat $remoteWorkDir/RY` > $remoteWorkDir/RB"
            get from: "$remoteWorkDir/RA", into: "$localWorkDir/LA"
            get from: "$remoteWorkDir/RB", into: "$localWorkDir/LB"
        }
    }

    assert file("$localWorkDir/LA").text as int == (x + y)
    assert file("$localWorkDir/LB").text as int == (x - y)
}

task('should put contents and compute') << {
    def x = randomInt()
    def y = randomInt()

    localWorkDir.mkdir()

    ssh.run {
        session(remotes.localhost) {
            execute "mkdir -vp $remoteWorkDir"
            put text: x, into: "$remoteWorkDir/RX"
            put bytes: y.toString().bytes, into: "$remoteWorkDir/RY"
            def a = execute("expr `cat $remoteWorkDir/RX` + `cat $remoteWorkDir/RY`") as int
            def b = execute("expr `cat $remoteWorkDir/RX` - `cat $remoteWorkDir/RY`") as int
            assert a == (x + y)
            assert b == (x - y)
        }
    }
}

task('should put the directory recursively') << {
    def x = randomInt()
    def y = randomInt()
    def z = randomInt()

    file("$localWorkDir/Y/Z").mkdirs()
    file("$localWorkDir/xfile") << x
    file("$localWorkDir/Y/yfile") << y
    file("$localWorkDir/Y/Z/zfile") << z

    // should merge and overwrite a directory
    ssh.run {
        session(remotes.localhost) {
            execute "mkdir -vp $remoteWorkDir/${localWorkDir.name}/Y"
            execute "echo -n dummy1 > $remoteWorkDir/${localWorkDir.name}/Y/yfile"
            execute "echo -n dummy2 > $remoteWorkDir/${localWorkDir.name}/Y/yfile2"
            assert get(from: "$remoteWorkDir/${localWorkDir.name}/Y/yfile") == 'dummy1'
            assert get(from: "$remoteWorkDir/${localWorkDir.name}/Y/yfile2") == 'dummy2'
        }
        session(remotes.localhost) {
            put from: localWorkDir, into: remoteWorkDir
        }
        session(remotes.localhost) {
            assert get(from: "$remoteWorkDir/${localWorkDir.name}/xfile") as int == x
            assert get(from: "$remoteWorkDir/${localWorkDir.name}/Y/yfile") as int == y
            assert get(from: "$remoteWorkDir/${localWorkDir.name}/Y/yfile2") == 'dummy2'
            assert get(from: "$remoteWorkDir/${localWorkDir.name}/Y/Z/zfile") as int == z
        }
    }
}

task('should get the directory recursively') << {
    def x = randomInt()
    def y = randomInt()
    def z = randomInt()

    file("$localWorkDir/${file(remoteWorkDir).name}/X/Y").mkdirs()
    file("$localWorkDir/${file(remoteWorkDir).name}/X/Y/yfile") << 'dummy1'
    file("$localWorkDir/${file(remoteWorkDir).name}/X/Y/yfile2") << 'dummy2'

    ssh.run {
        session(remotes.localhost) {
            execute "mkdir -vp $remoteWorkDir/X/Y/Z"
            execute "echo $x > $remoteWorkDir/X/xfile"
            execute "echo $y > $remoteWorkDir/X/Y/yfile"
            execute "echo $z > $remoteWorkDir/X/Y/Z/zfile"
        }
        session(remotes.localhost) {
            get from: remoteWorkDir, into: localWorkDir
        }
    }

    assert file("$localWorkDir/${file(remoteWorkDir).name}/X/xfile").text as int == x
    assert file("$localWorkDir/${file(remoteWorkDir).name}/X/Y/yfile").text as int == y
    assert file("$localWorkDir/${file(remoteWorkDir).name}/X/Y/yfile2").text == 'dummy2'
    assert file("$localWorkDir/${file(remoteWorkDir).name}/X/Y/Z/zfile").text as int == z
}

task('should get the large file and put it back', dependsOn: sideEffect) << {
    def fileSize = 1024 * 256
    localWorkDir.mkdir()

    ssh.run {
        session(remotes.localhost) {
            execute "mkdir -vp $remoteWorkDir"
            execute "dd if=/dev/zero of=$remoteWorkDir/result bs=1024 count=$fileSize"
            get from: "$remoteWorkDir/result", into: localWorkDir
        }
    }
    assert file("$localWorkDir/result").size() == 1024 * fileSize

    ssh.run {
        session(remotes.localhost) {
            put from: "$localWorkDir/result", into: "$remoteWorkDir/back"
            assert execute("wc -c < $remoteWorkDir/back") as int == 1024 * fileSize
        }
    }
}
