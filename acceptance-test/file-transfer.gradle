
task('feature: put, compute and get files') {
    dependsOn 'setupBuildDir'
    finalizedBy 'cleanRemoteTemp'

    doLast {
        def x = randomInt()
        def y = randomInt()

        def localX = file(localTempPath()) << x
        def localY = file(localTempPath()) << y
        def localA = file(localTempPath())
        def localB = file(localTempPath())

        def remoteX = remoteTempPath()
        def remoteY = remoteTempPath()
        def remoteA = remoteTempPath()
        def remoteB = remoteTempPath()

        // should put and get files exactly
        ssh.run {
            session(remotes.localhost) {
                put localX, remoteX
                put localY, remoteY
                execute("expr `cat $remoteX` + `cat $remoteY` > $remoteA")
                execute("expr `cat $remoteX` - `cat $remoteY` > $remoteB")
                get remoteA, localA
                get remoteB, localB
            }
        }

        assert localA.text as int == (x + y)
        assert localB.text as int == (x - y)

        // should overwrite local files
        ssh.run {
            session(remotes.localhost) {
                get remoteX, localA
                get remoteY, localB
            }
        }

        assert localA.text as int == x
        assert localB.text as int == y
    }
}

task('feature: put a directory recursively') {
    dependsOn 'setupBuildDir'
    finalizedBy 'cleanRemoteTemp'

    doLast {
        def x = randomInt()
        def y = randomInt()
        def z = randomInt()

        def localBase = file(localTempPath())
        file("$localBase/Y/Z").mkdirs()
        file("$localBase/xfile") << x
        file("$localBase/Y/yfile") << y
        file("$localBase/Y/Z/zfile") << z

        def remoteBase = remoteTempPath()

        // should merge and overwrite a directory
        ssh.run {
            session(remotes.localhost) {
                execute "mkdir -vp $remoteBase/${localBase.name}/Y"
                execute "echo dummy1 > $remoteBase/${localBase.name}/Y/yfile"
                execute "echo dummy2 > $remoteBase/${localBase.name}/Y/yfile2"
                assert execute("cat $remoteBase/${localBase.name}/Y/yfile") == 'dummy1'
                assert execute("cat $remoteBase/${localBase.name}/Y/yfile2") == 'dummy2'
            }
            session(remotes.localhost) {
                put localBase, remoteBase
            }
            session(remotes.localhost) {
                assert execute("cat $remoteBase/${localBase.name}/xfile") as int == x
                assert execute("cat $remoteBase/${localBase.name}/Y/yfile") as int == y
                assert execute("cat $remoteBase/${localBase.name}/Y/yfile2") == 'dummy2'
                assert execute("cat $remoteBase/${localBase.name}/Y/Z/zfile") as int == z
            }
        }
    }
}

task('feature: get a directory recursively') {
    dependsOn 'setupBuildDir'
    finalizedBy 'cleanRemoteTemp'

    doLast {
        def x = randomInt()
        def y = randomInt()
        def z = randomInt()

        def remoteBase = remoteTempPath()
        def remoteBaseName = file(remoteBase).name

        def localBase = file(localTempPath())
        file("$localBase/$remoteBaseName/X/Y").mkdirs()
        file("$localBase/$remoteBaseName/X/Y/yfile") << 'dummy1'
        file("$localBase/$remoteBaseName/X/Y/yfile2") << 'dummy2'

        ssh.run {
            session(remotes.localhost) {
                execute "mkdir -vp $remoteBase/X/Y/Z"
                execute "echo $x > $remoteBase/X/xfile"
                execute "echo $y > $remoteBase/X/Y/yfile"
                execute "echo $z > $remoteBase/X/Y/Z/zfile"
            }
            session(remotes.localhost) {
                get remoteBase, localBase
            }
        }

        assert file("$localBase/$remoteBaseName/X/xfile").text as int == x
        assert file("$localBase/$remoteBaseName/X/Y/yfile").text as int == y
        assert file("$localBase/$remoteBaseName/X/Y/yfile2").text == 'dummy2'
        assert file("$localBase/$remoteBaseName/X/Y/Z/zfile").text as int == z
    }
}

task('feature: get a large file and put it back', dependsOn: sideEffect) {
    dependsOn 'setupBuildDir'
    finalizedBy 'cleanLocalTemp'
    finalizedBy 'cleanRemoteTemp'

    doLast {
        def sizeX = 1024 * 256
        def localX = file("$buildDir/local-${randomInt()}")
        def pathX = remoteTempPath('X')
        def pathY = remoteTempPath('Y')

        def sizeY = ssh.run {
            session(remotes.localhost) {
                execute("dd if=/dev/zero of=$pathX bs=1024 count=$sizeX")
                get pathX, localX

                put localX, pathY
                execute("wc -c < $pathY") as int
            }
        }

        assert localX.size() == 1024 * sizeX
        assert sizeY == 1024 * sizeX
    }
}
