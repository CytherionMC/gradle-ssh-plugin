
remotes {
    sudoWithPassword {
        host = 'localhost'
        user = "user${randomInt()}p"
        password = "pass${randomInt()}"
    }
    sudoNoPassword {
        host = 'localhost'
        user = "user${randomInt()}n"
        password = "pass${randomInt()}"
    }
}

task('feature: execute a privileged command by sudo', dependsOn: sideEffect) {
    dependsOn   'createUserForSudoWithPassword'
    finalizedBy 'deleteUserForSudoWithPassword'
    doLast {
        assert ssh.run {
            session(remotes.sudoWithPassword) {
                executeSudo('whoami', pty: true)
            }
        } == 'root'
    }
}

task createUserForSudoWithPassword {
    finalizedBy 'deleteUserForSudoWithPassword'
    doLast {
        ssh.run {
            session(remotes.localhost) {
                def username = remotes.sudoWithPassword.user
                def password = remotes.sudoWithPassword.password
                execute("sudo useradd -m $username")
                execute("sudo passwd $username", interaction: {
                    when(partial: ~/.+[Pp]assword: */) {
                        standardInput << password << '\n'
                    }
                })
                execute("echo '$username ALL=(ALL) ALL' > /tmp/$username")
                execute("sudo chmod 440 /tmp/$username")
                execute("sudo chown 0.0 /tmp/$username")
                execute("sudo mv /tmp/$username /etc/sudoers.d")
            }
        }
    }
}

task deleteUserForSudoWithPassword << {
    ssh.run {
        session(remotes.localhost) {
            def username = remotes.sudoWithPassword.user
            execute("sudo rm -v /etc/sudoers.d/$username")
            execute("sudo userdel -r $username")
        }
    }
}

task('feature: execute a command as another user by sudo', dependsOn: sideEffect) {
    dependsOn   'createUserForSudoAsUserWithPassword'
    finalizedBy 'deleteUserForSudoAsUserWithPassword'
    doLast {
        def anotherUsername = "${remotes.sudoWithPassword.user}ya"
        assert ssh.run {
            session(remotes.sudoWithPassword) {
                ext.whoami = executeSudo("-u $anotherUsername whoami", pty: true)
            }
        } == anotherUsername
    }
}

task createUserForSudoAsUserWithPassword {
    finalizedBy 'deleteUserForSudoAsUserWithPassword'
    doLast {
        ssh.run {
            session(remotes.localhost) {
                def username = remotes.sudoWithPassword.user
                def password = remotes.sudoWithPassword.password
                execute("sudo useradd -m $username")
                execute("sudo passwd $username", interaction: {
                    when(partial: ~/.+[Pp]assword: */) {
                        standardInput << password << '\n'
                    }
                })
                execute("echo '$username ALL=(ALL) ALL' > /tmp/$username")
                execute("sudo chmod 440 /tmp/$username")
                execute("sudo chown 0.0 /tmp/$username")
                execute("sudo mv /tmp/$username /etc/sudoers.d")

                def anotherUsername = "${remotes.sudoWithPassword.user}ya"
                execute("sudo useradd -m $anotherUsername")
            }
        }
    }
}

task deleteUserForSudoAsUserWithPassword << {
    ssh.run {
        session(remotes.localhost) {
            def username = remotes.sudoWithPassword.user
            execute("sudo rm -v /etc/sudoers.d/$username")
            execute("sudo userdel -r $username")

            def anotherUsername = "${remotes.sudoWithPassword.user}ya"
            execute("sudo userdel -r $anotherUsername")
        }
    }
}

task('feature: execute a privileged command by sudo without password', dependsOn: sideEffect) {
    dependsOn 'createUserForSudoNoPassword'
    finalizedBy 'deleteUserForSudoNoPassword'
    doLast {
        assert ssh.run {
            session(remotes.localhost) {
                executeSudo('whoami', pty: true)
            }
        } == 'root'
    }
}

task createUserForSudoNoPassword {
    finalizedBy 'deleteUserForSudoNoPassword'
    doLast {
        ssh.run {
            session(remotes.localhost) {
                def username = remotes.sudoNoPassword.user
                def password = remotes.sudoNoPassword.password
                execute("sudo useradd -m $username")
                execute("sudo passwd $username", interaction: {
                    when(partial: ~/.+[Pp]assword: */) {
                        standardInput << password << '\n'
                    }
                })
                execute("echo '$username ALL=(ALL) NOPASSWD: ALL' > /tmp/$username")
                execute("sudo chmod 440 /tmp/$username")
                execute("sudo chown 0.0 /tmp/$username")
                execute("sudo mv /tmp/$username /etc/sudoers.d")
            }
        }
    }
}

task deleteUserForSudoNoPassword << {
    ssh.run {
        session(remotes.localhost) {
            def username = remotes.sudoNoPassword.user
            execute("sudo rm -v /etc/sudoers.d/$username")
            execute("sudo userdel -r $username")
        }
    }
}
