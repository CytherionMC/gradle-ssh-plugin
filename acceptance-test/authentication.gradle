
remotes {
    dedicatedIdentity {
        host = 'localhost'
        user = "user${randomInt()}n"
        identity = file("${System.properties['user.home']}/.ssh/id_rsa_pass")
        passphrase = 'pass_phrase'
    }
    usingAgent {
        host = 'localhost'
        user = System.properties['user.name']
        agent = true
    }
}


feature('using remote specific identity') {
    task 'useRemoteSpecificIdentity'
    category 'aggressiveTest'
}

task useRemoteSpecificIdentity {
    dependsOn   'createUserWithAuthorizedKey'
    finalizedBy 'deleteUserWithAuthorizedKey'
    doLast {
        assert ssh.run {
            session(remotes.dedicatedIdentity) {
                execute('whoami')
            }
        } == remotes.dedicatedIdentity.user
    }
}

task createUserWithAuthorizedKey {
    finalizedBy 'deleteUserWithAuthorizedKey'
    doLast {
        ssh.run {
            session(remotes.localhost) {
                def username = remotes.dedicatedIdentity.user
                execute("sudo useradd -m $username")
                execute("sudo -u $username mkdir ~$username/.ssh")
                execute("sudo -u $username tee ~$username/.ssh/authorized_keys < ~/.ssh/id_rsa_pass.pub")
            }
        }
    }
}

task deleteUserWithAuthorizedKey << {
    ssh.run {
        session(remotes.localhost) {
            def username = remotes.dedicatedIdentity.user
            execute("sudo userdel -r $username")
        }
    }
}


feature('authenticate with the ssh agent') {
    task 'authenticateWithSshAgent'
    category 'testWithAgent'
}

task authenticateWithSshAgent << {
    def x = randomInt()
    def y = randomInt()
    def a = ssh.run {
        session(remotes.usingAgent) {
            execute "expr $x + $y"
        }
    }
    assert a as int == (x + y)
}

