plugins {
    id 'groovy'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.4'
}

description = 'Gradle SSH Plugin provides remote execution and file transfer capabilities'
group = 'org.hidetake'

// Set product version if tag is given on Travis CI
version = System.getenv('TRAVIS_TAG') ?: 'SNAPSHOT'

ext.license = 'Apache-2.0'
ext.licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
ext.vcsUrl = 'https://github.com/int128/gradle-ssh-plugin.git'

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile('org.hidetake:groovy-ssh:2.2.0') {
        exclude module: 'groovy-all'
    }
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
    testCompile 'cglib:cglib-nodep:3.1'
}

processResources {
    filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: ['version': project.version])
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    from "${buildDir}/docs/groovydoc"
    classifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId rootProject.group
            artifactId rootProject.name
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = DELEGATE_FIRST
                    name rootProject.name
                    description rootProject.description
                    url rootProject.vcsUrl
                    scm {
                        url rootProject.vcsUrl
                        connection "scm:git:$rootProject.vcsUrl"
                    }
                    licenses {
                        license {
                            name rootProject.license
                            url rootProject.licenseUrl
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id rootProject.group
                            name rootProject.group
                        }
                    }
                }
            }
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER') ?: getProjectProperty('bintrayUser')
    key  = System.getenv('BINTRAY_KEY')  ?: getProjectProperty('bintrayKey')
    publications = ['maven']
    pkg {
        repo = 'maven'
        name = rootProject.name
        licenses = [rootProject.license]
        vcsUrl = rootProject.vcsUrl
        version {
            attributes = ['gradle-plugin': 'org.hidetake.ssh:org.hidetake:gradle-ssh-plugin']
            name = rootProject.version
        }
    }
}

def getProjectProperty(String key, String defaultValue = null) {
    project.hasProperty(key) ? project.property(key) : defaultValue
}
